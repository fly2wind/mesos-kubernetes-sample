{
    "Outputs": {
        "PublicSlaveDnsAddress": {
            "Description": "Public slaves",
            "Value": {
                "Fn::GetAtt": [
                    "PublicSlaveLoadBalancer",
                    "DNSName"
                ]
            }
        },
        "DnsAddress": {
            "Description": "Mesos Master",
            "Value": {
                "Fn::GetAtt": [
                    "ElasticLoadBalancer",
                    "DNSName"
                ]
            }
        }
    },
    "Mappings": {
        "RegionToAmi": {
            "ap-northeast-1": {
                "stable": "ami-6c5ac56c"
            },
            "sa-east-1": {
                "stable": "ami-3396012e"
            },
            "eu-central-1": {
                "stable": "ami-840a0899"
            },
            "ap-southeast-2": {
                "stable": "ami-f5ace5cf"
            },
            "ap-southeast-1": {
                "stable": "ami-46819614"
            },
            "us-west-2": {
                "stable": "ami-ed8b90dd"
            },
            "us-west-1": {
                "stable": "ami-2b29ee6f"
            },
            "us-gov-west-1": {
                "stable": "ami-796a085a"
            },
            "us-east-1": {
                "stable": "ami-05783d60"
            },
            "eu-west-1": {
                "stable": "ami-eb97bc9c"
            }
        },
        "Parameters": {
            "PrivateSubnetRange": {
                "default": "10.0.0.0/22"
            },
            "StackCreationTimeout": {
                "default": "PT30M"
            },
            "PublicSubnetRange": {
                "default": "10.0.4.0/22"
            },
            "SlaveInstanceType": {
                "default": "m3.xlarge"
            },
            "PublicSlaveInstanceType": {
                "default": "m3.xlarge"
            },
            "MasterInstanceType": {
                "default": "m3.xlarge"
            },
            "VPCSubnetRange": {
                "default": "10.0.0.0/16"
            }
        },
        "NATAmi": {
            "ap-northeast-1": {
                "default": "ami-55c29e54"
            },
            "sa-east-1": {
                "default": "ami-b972dba4"
            },
            "eu-central-1": {
                "default": "ami-204c7a3d"
            },
            "ap-southeast-2": {
                "default": "ami-996402a3"
            },
            "ap-southeast-1": {
                "default": "ami-b082dae2"
            },
            "us-west-1": {
                "default": "ami-2b2b296e"
            },
            "us-west-2": {
                "default": "ami-bb69128b"
            },
            "us-east-1": {
                "default": "ami-4c9e4b24"
            },
            "eu-west-1": {
                "default": "ami-3760b040"
            }
        }
    },
    "Resources": {
        "PublicSlaveIngressFour": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "CidrIp": "0.0.0.0/0",
                "GroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "ToPort": "21",
                "IpProtocol": "udp",
                "FromPort": "0"
            }
        },
        "OutboundNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "RuleAction": "allow",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "To": "65535",
                    "From": "0"
                },
                "Egress": "true",
                "Protocol": "-1",
                "RuleNumber": "100"
            }
        },
        "Vpc": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "Parameters",
                        "VPCSubnetRange",
                        "default"
                    ]
                },
                "Tags": [
                    {
                        "Value": {
                            "Ref": "AWS::StackName"
                        },
                        "Key": "Application"
                    },
                    {
                        "Value": "Public",
                        "Key": "Network"
                    }
                ],
                "EnableDnsHostnames": "true",
                "EnableDnsSupport": "true"
            }
        },
        "PublicSubnetNetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet"
                }
            }
        },
        "MasterInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "MasterRole"
                    }
                ],
                "Path": "/"
            }
        },
        "SlaveToMasterIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "MasterSecurityGroup"
                },
                "SourceSecurityGroupId": {
                    "Ref": "SlaveSecurityGroup"
                },
                "ToPort": "65535",
                "IpProtocol": "-1",
                "FromPort": "0"
            }
        },
        "PublicSlaveToMasterIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "MasterSecurityGroup"
                },
                "SourceSecurityGroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "ToPort": "65535",
                "IpProtocol": "-1",
                "FromPort": "0"
            }
        },
        "PublicNetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "Tags": [
                    {
                        "Value": {
                            "Ref": "AWS::StackName"
                        },
                        "Key": "Application"
                    },
                    {
                        "Value": "Public",
                        "Key": "Network"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            }
        },
        "PrivateInboundNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "RuleAction": "allow",
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "PortRange": {
                    "To": "65535",
                    "From": "0"
                },
                "Egress": "false",
                "Protocol": "-1",
                "RuleNumber": "100"
            }
        },
        "MasterLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionToAmi",
                        {
                            "Ref": "AWS::Region"
                        },
                        "stable"
                    ]
                },
                "InstanceType": {
                    "Fn::FindInMap": [
                        "Parameters",
                        "MasterInstanceType",
                        "default"
                    ]
                },
                "SecurityGroups": [
                    {
                        "Ref": "MasterSecurityGroup"
                    },
                    {
                        "Ref": "AdminSecurityGroup"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "VirtualName": "ephemeral0",
                        "DeviceName": "/dev/sdb"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "MasterInstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#cloud-config\n",
                                "\"coreos\":\n",
                                "  \"units\":\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"mask\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      etcd.service\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"mask\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      update-engine.service\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"mask\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      locksmithd.service\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"name\": |-\n",
                                "      systemd-resolved.service\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |\n",
                                "      [Unit]\n",
                                "      Description=Formats the /var/lib ephemeral drive\n",
                                "      Before=var-lib.mount dbus.service\n",
                                "      [Service]\n",
                                "      Type=oneshot\n",
                                "      RemainAfterExit=yes\n",
                                "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
                                "    \"name\": |-\n",
                                "      format-var-lib-ephemeral.service\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |-\n",
                                "      [Unit]\n",
                                "      Description=Mount /var/lib\n",
                                "      Before=dbus.service\n",
                                "      [Mount]\n",
                                "      What=/dev/xvdb\n",
                                "      Where=/var/lib\n",
                                "      Type=ext4\n",
                                "    \"name\": |-\n",
                                "      var-lib.mount\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |\n",
                                "      [Unit]\n",
                                "      Before=dcos.target\n",
                                "      [Service]\n",
                                "      Type=oneshot\n",
                                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
                                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
                                "    \"name\": |-\n",
                                "      dcos-link-env.service\n",
                                "  - \"content\": |\n",
                                "      [Unit]\n",
                                "      Description=Download the DCOS\n",
                                "      After=network-online.target\n",
                                "      Wants=network-online.target\n",
                                "      ConditionPathExists=!/opt/mesosphere/\n",
                                "      [Service]\n",
                                "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n",
                                "      Type=oneshot\n",
                                "      ExecStartPre=/usr/bin/curl -f --retry 20 -C - -o /tmp/bootstrap.tar.xz https://downloads.mesosphere.com/dcos/stable/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\n",
                                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
                                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
                                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
                                "    \"name\": |-\n",
                                "      dcos-download.service\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |-\n",
                                "      [Unit]\n",
                                "      Description=Prep the Pkgpanda working directories for this host.\n",
                                "      Requires=dcos-download.service\n",
                                "      After=dcos-download.service\n",
                                "      [Service]\n",
                                "      Type=oneshot\n",
                                "      EnvironmentFile=/opt/mesosphere/environment\n",
                                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
                                "      [Install]\n",
                                "      WantedBy=multi-user.target\n",
                                "    \"enable\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      dcos-setup.service\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |-\n",
                                "      [Unit]\n",
                                "      Description=Signal CloudFormation Success\n",
                                "      After=dcos.target\n",
                                "      Requires=dcos.target\n",
                                "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
                                "      [Service]\n",
                                "      Type=simple\n",
                                "      Restart=on-failure\n",
                                "      StartLimitInterval=0\n",
                                "      RestartSec=15s\n",
                                "      ExecStartPre=/usr/bin/docker pull mbabineau/cfn-bootstrap\n",
                                "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
                                "      ExecStartPre=/usr/bin/docker run --rm mbabineau/cfn-bootstrap \\\n",
                                "        cfn-signal -e 0 \\\n",
                                "        --resource MasterServerGroup \\\n",
                                "        --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\",
                                "\n",
                                "        --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "",
                                "\n",
                                "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
                                "    \"name\": |-\n",
                                "      dcos-cfn-signal.service\n",
                                "  \"update\":\n",
                                "    \"reboot-strategy\": |-\n",
                                "      off\n",
                                "\"write_files\":\n",
                                "- \"content\": |\n",
                                "    {\n",
                                "      \"environment\": {\n",
                                "        \"PROVIDER\": \"aws\"\n",
                                "      }\n",
                                "    }\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
                                "- \"content\": |\n",
                                "    AWS_REGION=",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "",
                                "\n",
                                "    AWS_STACK_ID=",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "",
                                "\n",
                                "    AWS_STACK_NAME=",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "",
                                "\n",
                                "    AWS_ACCESS_KEY_ID=",
                                {
                                    "Ref": "HostKeys"
                                },
                                "",
                                "\n",
                                "    AWS_SECRET_ACCESS_KEY=",
                                {
                                    "Fn::GetAtt": [
                                        "HostKeys",
                                        "SecretAccessKey"
                                    ]
                                },
                                "",
                                "\n",
                                "    ZOOKEEPER_CLUSTER_SIZE=1\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\n",
                                "- \"content\": |\n",
                                "    MESOS_CLUSTER=",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "",
                                "\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
                                "- \"content\": |\n",
                                "    EXHIBITOR_BACKEND=AWS_S3\n",
                                "    AWS_REGION=",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "",
                                "\n",
                                "    AWS_S3_BUCKET=",
                                {
                                    "Ref": "ExhibitorS3Bucket"
                                },
                                "",
                                "\n",
                                "    AWS_S3_PREFIX=",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "",
                                "\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
                                "- \"content\": |\n",
                                "    com.netflix.exhibitor.s3.access-key-id=",
                                {
                                    "Ref": "HostKeys"
                                },
                                "",
                                "\n",
                                "    com.netflix.exhibitor.s3.access-secret-key=",
                                {
                                    "Fn::GetAtt": [
                                        "HostKeys",
                                        "SecretAccessKey"
                                    ]
                                },
                                "",
                                "\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor.properties\n",
                                "- \"content\": |-\n",
                                "    MASTER_SOURCE=exhibitor\n",
                                "    EXHIBITOR_ADDRESS=",
                                {
                                    "Fn::GetAtt": [
                                        "InternalMasterLoadBalancer",
                                        "DNSName"
                                    ]
                                },
                                "",
                                "\n",
                                "    RESOLVERS=10.0.0.2\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
                                "- \"content\": |\n",
                                "    https://downloads.mesosphere.com/dcos/stable\n",
                                "  \"owner\": |-\n",
                                "    root\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-flags/repository-url\n",
                                "  \"permissions\": !!int |-\n",
                                "    420\n",
                                "- \"content\": |\n",
                                "    BOOTSTRAP_ID=6b0e032309ca50105edf3871182b8c9c1b27837e\n",
                                "  \"owner\": |-\n",
                                "    root\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-flags/bootstrap-id\n",
                                "  \"permissions\": !!int |-\n",
                                "    420\n",
                                "- \"content\": |-\n",
                                "    [\"dcos-config--setup_41d8ad6c80ab8e4291fa76f04e0c0c99f6892eea\", \"dcos-detect-ip--setup_41d8ad6c80ab8e4291fa76f04e0c0c99f6892eea\", \"dcos-metadata--setup_41d8ad6c80ab8e4291fa76f04e0c0c99f6892eea\"]\n",
                                "  \"owner\": |-\n",
                                "    root\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
                                "  \"permissions\": !!int |-\n",
                                "    420\n",
                                "- \"content\": \"\"\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/roles/master\n",
                                "- \"content\": \"\"\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/roles/aws_master\n",
                                "- \"content\": \"\"\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/roles/aws\n"
                            ]
                        ]
                    }
                },
                "AssociatePublicIpAddress": "true"
            }
        },
        "SlaveToSlaveIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "SlaveSecurityGroup"
                },
                "SourceSecurityGroupId": {
                    "Ref": "SlaveSecurityGroup"
                },
                "ToPort": "65535",
                "IpProtocol": "-1",
                "FromPort": "0"
            }
        },
        "PrivateRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "InstanceId": {
                    "Ref": "NATInstance"
                }
            }
        },
        "AdminSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "AdminLocation"
                        },
                        "ToPort": "65535",
                        "IpProtocol": "-1",
                        "FromPort": "0"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "Enable admin access to servers"
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Value": {
                            "Ref": "AWS::StackName"
                        },
                        "Key": "Application"
                    },
                    {
                        "Value": "Public",
                        "Key": "Network"
                    }
                ]
            }
        },
        "PublicSlaveIngressThree": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "CidrIp": "0.0.0.0/0",
                "GroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "ToPort": "65535",
                "IpProtocol": "tcp",
                "FromPort": "5052"
            }
        },
        "MasterSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "LbSecurityGroup"
                        },
                        "ToPort": "5050",
                        "IpProtocol": "tcp",
                        "FromPort": "5050"
                    },
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "LbSecurityGroup"
                        },
                        "ToPort": "80",
                        "IpProtocol": "tcp",
                        "FromPort": "80"
                    },
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "LbSecurityGroup"
                        },
                        "ToPort": "8080",
                        "IpProtocol": "tcp",
                        "FromPort": "8080"
                    },
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "LbSecurityGroup"
                        },
                        "ToPort": "8181",
                        "IpProtocol": "tcp",
                        "FromPort": "8181"
                    },
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "LbSecurityGroup"
                        },
                        "ToPort": "2181",
                        "IpProtocol": "tcp",
                        "FromPort": "2181"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "Mesos Masters"
            }
        },
        "SlaveToPublicSlaveIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "SourceSecurityGroupId": {
                    "Ref": "SlaveSecurityGroup"
                },
                "ToPort": "65535",
                "IpProtocol": "-1",
                "FromPort": "0"
            }
        },
        "PublicSlaveSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "Mesos Slaves Public"
            }
        },
        "PrivateSubnetNetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet"
                }
            }
        },
        "MasterServerGroup": {
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": {
                        "Fn::FindInMap": [
                            "Parameters",
                            "StackCreationTimeout",
                            "default"
                        ]
                    },
                    "Count": 1
                }
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "LoadBalancerNames": [
                    {
                        "Ref": "ElasticLoadBalancer"
                    },
                    {
                        "Ref": "InternalMasterLoadBalancer"
                    }
                ],
                "Tags": [
                    {
                        "Value": "mesos-master",
                        "Key": "role",
                        "PropagateAtLaunch": "true"
                    }
                ],
                "AvailabilityZones": [
                    {
                        "Fn::GetAtt": [
                            "PublicSubnet",
                            "AvailabilityZone"
                        ]
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "MasterLaunchConfig"
                },
                "MaxSize": 1,
                "MinSize": 1,
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PublicSubnet"
                    }
                ],
                "DesiredCapacity": 1
            }
        },
        "PublicSlaveIngressOne": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "CidrIp": "0.0.0.0/0",
                "GroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "ToPort": "21",
                "IpProtocol": "tcp",
                "FromPort": "0"
            }
        },
        "MasterToPublicSlaveIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "SourceSecurityGroupId": {
                    "Ref": "MasterSecurityGroup"
                },
                "ToPort": "65535",
                "IpProtocol": "-1",
                "FromPort": "0"
            }
        },
        "PublicSlaveLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionToAmi",
                        {
                            "Ref": "AWS::Region"
                        },
                        "stable"
                    ]
                },
                "InstanceType": {
                    "Fn::FindInMap": [
                        "Parameters",
                        "PublicSlaveInstanceType",
                        "default"
                    ]
                },
                "SecurityGroups": [
                    {
                        "Ref": "PublicSlaveSecurityGroup"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "VirtualName": "ephemeral0",
                        "DeviceName": "/dev/sdb"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#cloud-config\n",
                                "\"coreos\":\n",
                                "  \"units\":\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"mask\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      etcd.service\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"mask\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      update-engine.service\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"mask\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      locksmithd.service\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"name\": |-\n",
                                "      systemd-resolved.service\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |\n",
                                "      [Unit]\n",
                                "      Description=Formats the /var/lib ephemeral drive\n",
                                "      Before=var-lib.mount dbus.service\n",
                                "      [Service]\n",
                                "      Type=oneshot\n",
                                "      RemainAfterExit=yes\n",
                                "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
                                "    \"name\": |-\n",
                                "      format-var-lib-ephemeral.service\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |-\n",
                                "      [Unit]\n",
                                "      Description=Mount /var/lib\n",
                                "      Before=dbus.service\n",
                                "      [Mount]\n",
                                "      What=/dev/xvdb\n",
                                "      Where=/var/lib\n",
                                "      Type=ext4\n",
                                "    \"name\": |-\n",
                                "      var-lib.mount\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |\n",
                                "      [Unit]\n",
                                "      Before=dcos.target\n",
                                "      [Service]\n",
                                "      Type=oneshot\n",
                                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
                                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
                                "    \"name\": |-\n",
                                "      dcos-link-env.service\n",
                                "  - \"content\": |\n",
                                "      [Unit]\n",
                                "      Description=Download the DCOS\n",
                                "      After=network-online.target\n",
                                "      Wants=network-online.target\n",
                                "      ConditionPathExists=!/opt/mesosphere/\n",
                                "      [Service]\n",
                                "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n",
                                "      Type=oneshot\n",
                                "      ExecStartPre=/usr/bin/curl -f --retry 20 -C - -o /tmp/bootstrap.tar.xz https://downloads.mesosphere.com/dcos/stable/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\n",
                                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
                                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
                                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
                                "    \"name\": |-\n",
                                "      dcos-download.service\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |-\n",
                                "      [Unit]\n",
                                "      Description=Prep the Pkgpanda working directories for this host.\n",
                                "      Requires=dcos-download.service\n",
                                "      After=dcos-download.service\n",
                                "      [Service]\n",
                                "      Type=oneshot\n",
                                "      EnvironmentFile=/opt/mesosphere/environment\n",
                                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
                                "      [Install]\n",
                                "      WantedBy=multi-user.target\n",
                                "    \"enable\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      dcos-setup.service\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |-\n",
                                "      [Unit]\n",
                                "      Description=Signal CloudFormation Success\n",
                                "      After=dcos.target\n",
                                "      Requires=dcos.target\n",
                                "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
                                "      [Service]\n",
                                "      Type=simple\n",
                                "      Restart=on-failure\n",
                                "      StartLimitInterval=0\n",
                                "      RestartSec=15s\n",
                                "      ExecStartPre=/usr/bin/docker pull mbabineau/cfn-bootstrap\n",
                                "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
                                "      ExecStartPre=/usr/bin/docker run --rm mbabineau/cfn-bootstrap \\\n",
                                "        cfn-signal -e 0 \\\n",
                                "        --resource PublicSlaveServerGroup \\\n",
                                "        --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\",
                                "\n",
                                "        --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "",
                                "\n",
                                "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
                                "    \"name\": |-\n",
                                "      dcos-cfn-signal.service\n",
                                "  \"update\":\n",
                                "    \"reboot-strategy\": |-\n",
                                "      off\n",
                                "\"write_files\":\n",
                                "- \"content\": |\n",
                                "    {\n",
                                "      \"environment\": {\n",
                                "        \"PROVIDER\": \"aws\"\n",
                                "      }\n",
                                "    }\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
                                "- \"content\": |\n",
                                "    AWS_REGION=",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "",
                                "\n",
                                "    AWS_STACK_ID=",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "",
                                "\n",
                                "    AWS_STACK_NAME=",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "",
                                "\n",
                                "    AWS_ACCESS_KEY_ID=",
                                {
                                    "Ref": "HostKeys"
                                },
                                "",
                                "\n",
                                "    AWS_SECRET_ACCESS_KEY=",
                                {
                                    "Fn::GetAtt": [
                                        "HostKeys",
                                        "SecretAccessKey"
                                    ]
                                },
                                "",
                                "\n",
                                "    ZOOKEEPER_CLUSTER_SIZE=1\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\n",
                                "- \"content\": |\n",
                                "    MESOS_CLUSTER=",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "",
                                "\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
                                "- \"content\": |\n",
                                "    EXHIBITOR_BACKEND=AWS_S3\n",
                                "    AWS_REGION=",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "",
                                "\n",
                                "    AWS_S3_BUCKET=",
                                {
                                    "Ref": "ExhibitorS3Bucket"
                                },
                                "",
                                "\n",
                                "    AWS_S3_PREFIX=",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "",
                                "\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
                                "- \"content\": |\n",
                                "    com.netflix.exhibitor.s3.access-key-id=",
                                {
                                    "Ref": "HostKeys"
                                },
                                "",
                                "\n",
                                "    com.netflix.exhibitor.s3.access-secret-key=",
                                {
                                    "Fn::GetAtt": [
                                        "HostKeys",
                                        "SecretAccessKey"
                                    ]
                                },
                                "",
                                "\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor.properties\n",
                                "- \"content\": |-\n",
                                "    MASTER_SOURCE=exhibitor\n",
                                "    EXHIBITOR_ADDRESS=",
                                {
                                    "Fn::GetAtt": [
                                        "InternalMasterLoadBalancer",
                                        "DNSName"
                                    ]
                                },
                                "",
                                "\n",
                                "    RESOLVERS=10.0.0.2\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
                                "- \"content\": |\n",
                                "    https://downloads.mesosphere.com/dcos/stable\n",
                                "  \"owner\": |-\n",
                                "    root\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-flags/repository-url\n",
                                "  \"permissions\": !!int |-\n",
                                "    420\n",
                                "- \"content\": |\n",
                                "    BOOTSTRAP_ID=6b0e032309ca50105edf3871182b8c9c1b27837e\n",
                                "  \"owner\": |-\n",
                                "    root\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-flags/bootstrap-id\n",
                                "  \"permissions\": !!int |-\n",
                                "    420\n",
                                "- \"content\": |-\n",
                                "    [\"dcos-config--setup_41d8ad6c80ab8e4291fa76f04e0c0c99f6892eea\", \"dcos-detect-ip--setup_41d8ad6c80ab8e4291fa76f04e0c0c99f6892eea\", \"dcos-metadata--setup_41d8ad6c80ab8e4291fa76f04e0c0c99f6892eea\"]\n",
                                "  \"owner\": |-\n",
                                "    root\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
                                "  \"permissions\": !!int |-\n",
                                "    420\n",
                                "- \"content\": \"\"\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/roles/slave_public\n",
                                "- \"content\": \"\"\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/roles/aws\n"
                            ]
                        ]
                    }
                },
                "AssociatePublicIpAddress": "true"
            }
        },
        "PublicRoute": {
            "DependsOn": "GatewayToInternet",
            "Type": "AWS::EC2::Route",
            "Properties": {
                "GatewayId": {
                    "Ref": "InternetGateway"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PublicSlaveServerGroup": {
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": {
                        "Fn::FindInMap": [
                            "Parameters",
                            "StackCreationTimeout",
                            "default"
                        ]
                    },
                    "Count": {
                        "Ref": "PublicSlaveInstanceCount"
                    }
                }
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "LoadBalancerNames": [
                    {
                        "Ref": "PublicSlaveLoadBalancer"
                    }
                ],
                "Tags": [
                    {
                        "Value": "mesos-slave",
                        "Key": "role",
                        "PropagateAtLaunch": "true"
                    }
                ],
                "AvailabilityZones": [
                    {
                        "Fn::GetAtt": [
                            "PublicSubnet",
                            "AvailabilityZone"
                        ]
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "PublicSlaveLaunchConfig"
                },
                "MaxSize": {
                    "Ref": "PublicSlaveInstanceCount"
                },
                "MinSize": {
                    "Ref": "PublicSlaveInstanceCount"
                },
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PublicSubnet"
                    }
                ],
                "DesiredCapacity": {
                    "Ref": "PublicSlaveInstanceCount"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "Tags": [
                    {
                        "Value": {
                            "Ref": "AWS::StackName"
                        },
                        "Key": "Application"
                    },
                    {
                        "Value": "Public",
                        "Key": "Network"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            }
        },
        "PublicSlaveToPublicSlaveIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "SourceSecurityGroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "ToPort": "65535",
                "IpProtocol": "-1",
                "FromPort": "0"
            }
        },
        "SlaveToMasterLBIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "LbSecurityGroup"
                },
                "SourceSecurityGroupId": {
                    "Ref": "SlaveSecurityGroup"
                },
                "ToPort": "2181",
                "IpProtocol": "tcp",
                "FromPort": "2181"
            }
        },
        "NATInstance": {
            "DependsOn": "GatewayToInternet",
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "SlaveSecurityGroup"
                            },
                            {
                                "Ref": "MasterSecurityGroup"
                            },
                            {
                                "Ref": "AdminSecurityGroup"
                            }
                        ],
                        "DeleteOnTermination": "true",
                        "DeviceIndex": "0",
                        "SubnetId": {
                            "Ref": "PublicSubnet"
                        },
                        "AssociatePublicIpAddress": "true"
                    }
                ],
                "InstanceType": "m3.medium",
                "ImageId": {
                    "Fn::FindInMap": [
                        "NATAmi",
                        {
                            "Ref": "AWS::Region"
                        },
                        "default"
                    ]
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SourceDestCheck": "false"
            }
        },
        "DHCPOptions": {
            "Type": "AWS::EC2::DHCPOptions",
            "Properties": {
                "DomainName": {
                    "Fn::If": [
                        "RegionIsUsEast1",
                        "ec2.internal",
                        {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    ".compute.internal"
                                ]
                            ]
                        }
                    ]
                },
                "DomainNameServers": [
                    "AmazonProvidedDNS"
                ]
            }
        },
        "PublicSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet"
                }
            }
        },
        "InboundNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "RuleAction": "allow",
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "PortRange": {
                    "To": "65535",
                    "From": "0"
                },
                "Egress": "false",
                "Protocol": "-1",
                "RuleNumber": "100"
            }
        },
        "PrivateSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "Parameters",
                        "PrivateSubnetRange",
                        "default"
                    ]
                },
                "Tags": [
                    {
                        "Value": {
                            "Ref": "AWS::StackName"
                        },
                        "Key": "Application"
                    },
                    {
                        "Value": "Private",
                        "Key": "Network"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            }
        },
        "HostKeys": {
            "Type": "AWS::IAM::AccessKey",
            "Properties": {
                "UserName": {
                    "Ref": "IAMUser"
                }
            }
        },
        "PrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "Tags": [
                    {
                        "Value": {
                            "Ref": "AWS::StackName"
                        },
                        "Key": "Application"
                    },
                    {
                        "Value": "Public",
                        "Key": "Network"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            }
        },
        "PrivateOutboundNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "RuleAction": "allow",
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "PortRange": {
                    "To": "65535",
                    "From": "0"
                },
                "Egress": "true",
                "Protocol": "-1",
                "RuleNumber": "100"
            }
        },
        "SlaveServerGroup": {
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": {
                        "Fn::FindInMap": [
                            "Parameters",
                            "StackCreationTimeout",
                            "default"
                        ]
                    },
                    "Count": {
                        "Ref": "SlaveInstanceCount"
                    }
                }
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "Tags": [
                    {
                        "Value": "mesos-slave",
                        "Key": "role",
                        "PropagateAtLaunch": "true"
                    }
                ],
                "AvailabilityZones": [
                    {
                        "Fn::GetAtt": [
                            "PrivateSubnet",
                            "AvailabilityZone"
                        ]
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "SlaveLaunchConfig"
                },
                "MaxSize": {
                    "Ref": "SlaveInstanceCount"
                },
                "MinSize": {
                    "Ref": "SlaveInstanceCount"
                },
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PrivateSubnet"
                    }
                ],
                "DesiredCapacity": {
                    "Ref": "SlaveInstanceCount"
                }
            }
        },
        "SlaveLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionToAmi",
                        {
                            "Ref": "AWS::Region"
                        },
                        "stable"
                    ]
                },
                "InstanceType": {
                    "Fn::FindInMap": [
                        "Parameters",
                        "SlaveInstanceType",
                        "default"
                    ]
                },
                "SecurityGroups": [
                    {
                        "Ref": "SlaveSecurityGroup"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "VirtualName": "ephemeral0",
                        "DeviceName": "/dev/sdb"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#cloud-config\n",
                                "\"coreos\":\n",
                                "  \"units\":\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"mask\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      etcd.service\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"mask\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      update-engine.service\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"mask\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      locksmithd.service\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"name\": |-\n",
                                "      systemd-resolved.service\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |\n",
                                "      [Unit]\n",
                                "      Description=Formats the /var/lib ephemeral drive\n",
                                "      Before=var-lib.mount dbus.service\n",
                                "      [Service]\n",
                                "      Type=oneshot\n",
                                "      RemainAfterExit=yes\n",
                                "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
                                "    \"name\": |-\n",
                                "      format-var-lib-ephemeral.service\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |-\n",
                                "      [Unit]\n",
                                "      Description=Mount /var/lib\n",
                                "      Before=dbus.service\n",
                                "      [Mount]\n",
                                "      What=/dev/xvdb\n",
                                "      Where=/var/lib\n",
                                "      Type=ext4\n",
                                "    \"name\": |-\n",
                                "      var-lib.mount\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |\n",
                                "      [Unit]\n",
                                "      Before=dcos.target\n",
                                "      [Service]\n",
                                "      Type=oneshot\n",
                                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
                                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
                                "    \"name\": |-\n",
                                "      dcos-link-env.service\n",
                                "  - \"content\": |\n",
                                "      [Unit]\n",
                                "      Description=Download the DCOS\n",
                                "      After=network-online.target\n",
                                "      Wants=network-online.target\n",
                                "      ConditionPathExists=!/opt/mesosphere/\n",
                                "      [Service]\n",
                                "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n",
                                "      Type=oneshot\n",
                                "      ExecStartPre=/usr/bin/curl -f --retry 20 -C - -o /tmp/bootstrap.tar.xz https://downloads.mesosphere.com/dcos/stable/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\n",
                                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
                                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
                                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
                                "    \"name\": |-\n",
                                "      dcos-download.service\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |-\n",
                                "      [Unit]\n",
                                "      Description=Prep the Pkgpanda working directories for this host.\n",
                                "      Requires=dcos-download.service\n",
                                "      After=dcos-download.service\n",
                                "      [Service]\n",
                                "      Type=oneshot\n",
                                "      EnvironmentFile=/opt/mesosphere/environment\n",
                                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
                                "      [Install]\n",
                                "      WantedBy=multi-user.target\n",
                                "    \"enable\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      dcos-setup.service\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |-\n",
                                "      [Unit]\n",
                                "      Description=Signal CloudFormation Success\n",
                                "      After=dcos.target\n",
                                "      Requires=dcos.target\n",
                                "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
                                "      [Service]\n",
                                "      Type=simple\n",
                                "      Restart=on-failure\n",
                                "      StartLimitInterval=0\n",
                                "      RestartSec=15s\n",
                                "      ExecStartPre=/usr/bin/docker pull mbabineau/cfn-bootstrap\n",
                                "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
                                "      ExecStartPre=/usr/bin/docker run --rm mbabineau/cfn-bootstrap \\\n",
                                "        cfn-signal -e 0 \\\n",
                                "        --resource SlaveServerGroup \\\n",
                                "        --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\",
                                "\n",
                                "        --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "",
                                "\n",
                                "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
                                "    \"name\": |-\n",
                                "      dcos-cfn-signal.service\n",
                                "  \"update\":\n",
                                "    \"reboot-strategy\": |-\n",
                                "      off\n",
                                "\"write_files\":\n",
                                "- \"content\": |\n",
                                "    {\n",
                                "      \"environment\": {\n",
                                "        \"PROVIDER\": \"aws\"\n",
                                "      }\n",
                                "    }\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
                                "- \"content\": |\n",
                                "    AWS_REGION=",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "",
                                "\n",
                                "    AWS_STACK_ID=",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "",
                                "\n",
                                "    AWS_STACK_NAME=",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "",
                                "\n",
                                "    AWS_ACCESS_KEY_ID=",
                                {
                                    "Ref": "HostKeys"
                                },
                                "",
                                "\n",
                                "    AWS_SECRET_ACCESS_KEY=",
                                {
                                    "Fn::GetAtt": [
                                        "HostKeys",
                                        "SecretAccessKey"
                                    ]
                                },
                                "",
                                "\n",
                                "    ZOOKEEPER_CLUSTER_SIZE=1\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\n",
                                "- \"content\": |\n",
                                "    MESOS_CLUSTER=",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "",
                                "\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
                                "- \"content\": |\n",
                                "    EXHIBITOR_BACKEND=AWS_S3\n",
                                "    AWS_REGION=",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "",
                                "\n",
                                "    AWS_S3_BUCKET=",
                                {
                                    "Ref": "ExhibitorS3Bucket"
                                },
                                "",
                                "\n",
                                "    AWS_S3_PREFIX=",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "",
                                "\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
                                "- \"content\": |\n",
                                "    com.netflix.exhibitor.s3.access-key-id=",
                                {
                                    "Ref": "HostKeys"
                                },
                                "",
                                "\n",
                                "    com.netflix.exhibitor.s3.access-secret-key=",
                                {
                                    "Fn::GetAtt": [
                                        "HostKeys",
                                        "SecretAccessKey"
                                    ]
                                },
                                "",
                                "\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor.properties\n",
                                "- \"content\": |-\n",
                                "    MASTER_SOURCE=exhibitor\n",
                                "    EXHIBITOR_ADDRESS=",
                                {
                                    "Fn::GetAtt": [
                                        "InternalMasterLoadBalancer",
                                        "DNSName"
                                    ]
                                },
                                "",
                                "\n",
                                "    RESOLVERS=10.0.0.2\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
                                "- \"content\": |\n",
                                "    https://downloads.mesosphere.com/dcos/stable\n",
                                "  \"owner\": |-\n",
                                "    root\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-flags/repository-url\n",
                                "  \"permissions\": !!int |-\n",
                                "    420\n",
                                "- \"content\": |\n",
                                "    BOOTSTRAP_ID=6b0e032309ca50105edf3871182b8c9c1b27837e\n",
                                "  \"owner\": |-\n",
                                "    root\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-flags/bootstrap-id\n",
                                "  \"permissions\": !!int |-\n",
                                "    420\n",
                                "- \"content\": |-\n",
                                "    [\"dcos-config--setup_41d8ad6c80ab8e4291fa76f04e0c0c99f6892eea\", \"dcos-detect-ip--setup_41d8ad6c80ab8e4291fa76f04e0c0c99f6892eea\", \"dcos-metadata--setup_41d8ad6c80ab8e4291fa76f04e0c0c99f6892eea\"]\n",
                                "  \"owner\": |-\n",
                                "    root\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
                                "  \"permissions\": !!int |-\n",
                                "    420\n",
                                "- \"content\": \"\"\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/roles/slave\n",
                                "- \"content\": \"\"\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/roles/aws\n"
                            ]
                        ]
                    }
                },
                "AssociatePublicIpAddress": "false"
            }
        },
        "ElasticLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Subnets": [
                    {
                        "Ref": "PublicSubnet"
                    }
                ],
                "HealthCheck": {
                    "HealthyThreshold": "2",
                    "Target": "HTTP:5050/health",
                    "Timeout": "5",
                    "UnhealthyThreshold": "2",
                    "Interval": "30"
                },
                "SecurityGroups": [
                    {
                        "Ref": "LbSecurityGroup"
                    },
                    {
                        "Ref": "AdminSecurityGroup"
                    }
                ],
                "Listeners": [
                    {
                        "Protocol": "HTTP",
                        "InstanceProtocol": "HTTP",
                        "LoadBalancerPort": "80",
                        "InstancePort": "80"
                    },
                    {
                        "Protocol": "TCP",
                        "InstanceProtocol": "TCP",
                        "LoadBalancerPort": "443",
                        "InstancePort": "443"
                    }
                ]
            }
        },
        "MasterToSlaveIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "SlaveSecurityGroup"
                },
                "SourceSecurityGroupId": {
                    "Ref": "MasterSecurityGroup"
                },
                "ToPort": "65535",
                "IpProtocol": "-1",
                "FromPort": "0"
            }
        },
        "PublicSlaveLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Subnets": [
                    {
                        "Ref": "PublicSubnet"
                    }
                ],
                "HealthCheck": {
                    "HealthyThreshold": "2",
                    "Target": "HTTP:80/",
                    "Timeout": "5",
                    "UnhealthyThreshold": "2",
                    "Interval": "30"
                },
                "SecurityGroups": [
                    {
                        "Ref": "PublicSlaveSecurityGroup"
                    }
                ],
                "Listeners": [
                    {
                        "Protocol": "HTTP",
                        "InstanceProtocol": "HTTP",
                        "LoadBalancerPort": "80",
                        "InstancePort": "80"
                    },
                    {
                        "Protocol": "TCP",
                        "InstanceProtocol": "TCP",
                        "LoadBalancerPort": "443",
                        "InstancePort": "443"
                    }
                ]
            }
        },
        "PublicSlaveToSlaveIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "SlaveSecurityGroup"
                },
                "SourceSecurityGroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "ToPort": "65535",
                "IpProtocol": "-1",
                "FromPort": "0"
            }
        },
        "PublicSlaveIngressTwo": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "CidrIp": "0.0.0.0/0",
                "GroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "ToPort": "5050",
                "IpProtocol": "tcp",
                "FromPort": "23"
            }
        },
        "SlaveSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "Mesos Slaves"
            }
        },
        "VPCDHCPOptionsAssociation": {
            "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
            "Properties": {
                "DhcpOptionsId": {
                    "Ref": "DHCPOptions"
                },
                "VpcId": {
                    "Ref": "Vpc"
                }
            }
        },
        "PrivateSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet"
                }
            }
        },
        "InternalMasterLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Subnets": [
                    {
                        "Ref": "PublicSubnet"
                    }
                ],
                "HealthCheck": {
                    "HealthyThreshold": "2",
                    "Target": "HTTP:5050/health",
                    "Timeout": "5",
                    "UnhealthyThreshold": "2",
                    "Interval": "30"
                },
                "Scheme": "internal",
                "SecurityGroups": [
                    {
                        "Ref": "LbSecurityGroup"
                    },
                    {
                        "Ref": "AdminSecurityGroup"
                    },
                    {
                        "Ref": "SlaveSecurityGroup"
                    },
                    {
                        "Ref": "PublicSlaveSecurityGroup"
                    },
                    {
                        "Ref": "MasterSecurityGroup"
                    }
                ],
                "Listeners": [
                    {
                        "Protocol": "HTTP",
                        "InstanceProtocol": "HTTP",
                        "LoadBalancerPort": "5050",
                        "InstancePort": "5050"
                    },
                    {
                        "Protocol": "TCP",
                        "InstanceProtocol": "TCP",
                        "LoadBalancerPort": "2181",
                        "InstancePort": "2181"
                    },
                    {
                        "Protocol": "HTTP",
                        "InstanceProtocol": "HTTP",
                        "LoadBalancerPort": "8181",
                        "InstancePort": "8181"
                    },
                    {
                        "Protocol": "HTTP",
                        "InstanceProtocol": "HTTP",
                        "LoadBalancerPort": "80",
                        "InstancePort": "80"
                    },
                    {
                        "Protocol": "TCP",
                        "InstanceProtocol": "TCP",
                        "LoadBalancerPort": "443",
                        "InstancePort": "443"
                    },
                    {
                        "Protocol": "HTTP",
                        "InstanceProtocol": "HTTP",
                        "LoadBalancerPort": "8080",
                        "InstancePort": "8080"
                    }
                ]
            }
        },
        "GatewayToInternet": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "Vpc"
                }
            }
        },
        "IAMUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "ExhibitorS3Bucket"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "ExhibitorS3Bucket"
                                                    }
                                                ]
                                            ]
                                        }
                                    ],
                                    "Action": [
                                        "s3:AbortMultipartUpload",
                                        "s3:DeleteObject",
                                        "s3:GetBucketAcl",
                                        "s3:GetBucketPolicy",
                                        "s3:GetObject",
                                        "s3:GetObjectAcl",
                                        "s3:ListBucket",
                                        "s3:ListBucketMultipartUploads",
                                        "s3:ListMultipartUploadParts",
                                        "s3:PutObject",
                                        "s3:PutObjectAcl"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Ref": "AWS::StackId"
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    {
                                                        "Ref": "AWS::StackId"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    ],
                                    "Action": [
                                        "cloudformation:*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Resource": "*",
                                    "Action": [
                                        "ec2:DescribeKeyPairs",
                                        "ec2:DescribeSubnets",
                                        "autoscaling:DescribeLaunchConfigurations",
                                        "autoscaling:UpdateAutoScalingGroup",
                                        "autoscaling:DescribeAutoScalingGroups",
                                        "autoscaling:DescribeScalingActivities",
                                        "elasticloadbalancing:DescribeLoadBalancers"
                                    ]
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "root"
                    }
                ]
            }
        },
        "MasterToMasterIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "MasterSecurityGroup"
                },
                "SourceSecurityGroupId": {
                    "Ref": "MasterSecurityGroup"
                },
                "ToPort": "65535",
                "IpProtocol": "-1",
                "FromPort": "0"
            }
        },
        "PrivateNetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "Tags": [
                    {
                        "Value": {
                            "Ref": "AWS::StackName"
                        },
                        "Key": "Application"
                    },
                    {
                        "Value": "Public",
                        "Key": "Network"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            }
        },
        "ExhibitorS3Bucket": {
            "DeletionPolicy": "Retain",
            "Type": "AWS::S3::Bucket"
        },
        "PublicSlaveIngressSix": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "CidrIp": "0.0.0.0/0",
                "GroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "ToPort": "65535",
                "IpProtocol": "udp",
                "FromPort": "5052"
            }
        },
        "PublicSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "Parameters",
                        "PublicSubnetRange",
                        "default"
                    ]
                },
                "Tags": [
                    {
                        "Value": {
                            "Ref": "AWS::StackName"
                        },
                        "Key": "Application"
                    },
                    {
                        "Value": "Public",
                        "Key": "Network"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            }
        },
        "MasterRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "ExhibitorS3Bucket"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "ExhibitorS3Bucket"
                                                    }
                                                ]
                                            ]
                                        }
                                    ],
                                    "Action": [
                                        "s3:AbortMultipartUpload",
                                        "s3:DeleteObject",
                                        "s3:GetBucketAcl",
                                        "s3:GetBucketPolicy",
                                        "s3:GetObject",
                                        "s3:GetObjectAcl",
                                        "s3:ListBucket",
                                        "s3:ListBucketMultipartUploads",
                                        "s3:ListMultipartUploadParts",
                                        "s3:PutObject",
                                        "s3:PutObjectAcl"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Ref": "AWS::StackId"
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    {
                                                        "Ref": "AWS::StackId"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    ],
                                    "Action": [
                                        "cloudformation:*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Resource": "*",
                                    "Action": [
                                        "ec2:DescribeKeyPairs",
                                        "ec2:DescribeSubnets",
                                        "autoscaling:DescribeLaunchConfigurations",
                                        "autoscaling:UpdateAutoScalingGroup",
                                        "autoscaling:DescribeAutoScalingGroups",
                                        "autoscaling:DescribeScalingActivities",
                                        "elasticloadbalancing:DescribeLoadBalancers"
                                    ]
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "root"
                    }
                ],
                "Path": "/"
            }
        },
        "PublicSlaveIngressFive": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "CidrIp": "0.0.0.0/0",
                "GroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "ToPort": "5050",
                "IpProtocol": "udp",
                "FromPort": "23"
            }
        },
        "LbSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "Mesos Master LB"
            }
        }
    },
    "Description": "Launching the Mesosphere DCOS cluster",
    "AWSTemplateFormatVersion": "2010-09-09",
    "Conditions": {
        "RegionIsUsEast1": {
            "Fn::Equals": [
                {
                    "Ref": "AWS::Region"
                },
                "us-east-1"
            ]
        }
    },
    "Parameters": {
        "SlaveInstanceCount": {
            "Default": "5",
            "Description": "Number of slave nodes to launch",
            "Type": "Number"
        },
        "AdminLocation": {
            "Default": "0.0.0.0/0",
            "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
            "Type": "String",
            "MaxLength": "18",
            "MinLength": "9",
            "Description": "The IP range to whitelist for admin access.",
            "ConstraintDescription": "must be a valid CIDR."
        },
        "KeyName": {
            "Description": "Name of SSH key to link",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "AcceptEULA": {
            "Description": "Please read and agree to our EULA: https://docs.mesosphere.com/community-edition-eula/",
            "AllowedValues": [
                "Yes"
            ],
            "Type": "String"
        },
        "PublicSlaveInstanceCount": {
            "Default": "1",
            "Description": "Number of public slave nodes to launch",
            "Type": "Number"
        }
    },
    "Metadata": {
        "DcosImageCommit": "4f65fe21c539b5e7234672d2b7a78f211890b5fc",
        "TemplateGenerationDate": "2015-11-12 01:12:11.034661"
    }
}